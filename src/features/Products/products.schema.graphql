type Query {
    products(input: ProductsQueryInput): ProductsQueryResult!
    product(id: Id!): Product!
}

type Mutation {
    createProduct(category: String!, product: CreateProductArgs!): Product!
    deleteProduct(id: Id!): Product!
    updateProduct(id: Id!, product: UpdateProductArgs!): Product!
}

input ProductsQueryInput {
    ids: [Id!]
    categories: [String]
    filter: ProductFilterQueryInput
    pageData: PageDataInput
}

input ProductFilterQueryInput {
    logic: FilterLogic!
    attributes: [ProductInputAttribute!]
}

enum FilterLogic {
    OR
    AND
}

type ProductsQueryResult {
    pageData: PageData
    items: [Product!]!
}

input CreateProductArgs {
    cover: Upload
    name: String!
    description: String!
    price: Int!
    attributes: [ProductInputAttribute!]!
}

input UpdateProductArgs {
    cover: Upload
    name: String
    description: String
    price: Int
    attributes: [ProductInputAttribute!]
}

type Product {
    id: Id!
    cover: String
    category: String!
    description: String!
    name: String!
    price: Int!
    attributes: [ProductAttribute!]!
}

type ProductAttribute {
    name: String!
    value: String!
}

input ProductInputAttribute {
    name: String!
    value: String!
}